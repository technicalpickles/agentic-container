name: Validate Renovate Configuration

on:
  push:
    paths: ['.github/renovate.json5', 'scripts/validate-renovate.sh']
    branches: [main, renovate/**]
  pull_request:
    paths: ['.github/renovate.json5', 'scripts/validate-renovate.sh'] 
    branches: [main]
  # Weekly validation to catch configuration drift
  schedule:
    - cron: '0 6 * * 1'  # 6 AM every Monday
  workflow_dispatch:  # Allow manual triggering

env:
  # Disable Renovate telemetry for CI runs
  RENOVATE_CONFIG_MIGRATION: false

jobs:
  validate-config:
    name: Validate Renovate Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
      # No additional permissions needed for validation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Full history needed to detect changes
          fetch-depth: 0

      - name: Setup Node.js for Renovate validation
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          npm ci

      - name: Run quick validation (Docker-only)
        run: ./scripts/validate-renovate.sh --quick
        
      - name: Run comprehensive validation (Docker-only)
        run: ./scripts/validate-renovate.sh

      # Only run expensive dry-run validation on renovate config changes
      - name: Detect configuration changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q '.github/renovate.json5'; then
            echo "renovate_config_changed=true" >> $GITHUB_OUTPUT
          else
            echo "renovate_config_changed=false" >> $GITHUB_OUTPUT  
          fi

      - name: Run additional validation (on config changes)
        if: steps.changes.outputs.renovate_config_changed == 'true'
        run: |
          echo "üöÄ Running additional validation due to Renovate config changes..."
          ./scripts/validate-renovate.sh


  check-version-coverage:
    name: Check Version Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Analyze version pattern coverage
        run: |
          echo "üìä Analyzing version pattern coverage..."
          echo "======================================"
          
          # Count patterns in Renovate config
          config_patterns=$(grep -c "matchStrings\|depName" .github/renovate.json5 || echo "0")
          echo "üîß Renovate config patterns: $config_patterns"
          
          # Count actual version declarations in codebase
          dockerfile_versions=$(find . -name "*Dockerfile*" -exec grep -l "ARG.*VERSION=" {} \; | wc -l)
          script_versions=$(find scripts/ -name "*.sh" -exec grep -l "VERSION.*=" {} \; | wc -l)
          workflow_versions=$(find .github/workflows/ -name "*.yml" -exec grep -l "version:" {} \; | wc -l)
          
          echo "üìÅ Files with version declarations:"
          echo "  - Dockerfiles: $dockerfile_versions"
          echo "  - Scripts: $script_versions" 
          echo "  - Workflows: $workflow_versions"
          
          # List specific version declarations
          echo
          echo "üéØ Detected version patterns:"
          echo "Language runtimes:"
          grep -rE "ARG\s+(NODE_VERSION|PYTHON_VERSION|RUBY_VERSION|GO_VERSION)=" . --include="*Dockerfile*" | sed 's/^/  /'
          
          echo "Development tools:"
          grep -rE "ARG\s+(AST_GREP_VERSION|LEFTHOOK_VERSION|UV_VERSION)=" . --include="*Dockerfile*" | sed 's/^/  /'
          
          echo "Script versions:"
          grep -rE "VERSION.*\d+\.\d+\.\d+" scripts/ | sed 's/^/  /'
          
          # Recommendations
          echo
          echo "üí° Coverage Analysis:"
          total_files=$((dockerfile_versions + script_versions + workflow_versions))
          if [ $total_files -gt $config_patterns ]; then
            echo "‚ö†Ô∏è  Found $total_files files with versions but only $config_patterns config patterns"
            echo "   Consider adding more patterns to Renovate config"
          else
            echo "‚úÖ Good coverage: $config_patterns patterns for $total_files files"
          fi

  security-scan:
    name: Security Scan of Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Scan for security issues in Renovate config
        run: |
          echo "üîí Scanning Renovate configuration for security issues..."
          echo "======================================================"
          
          # Check for potential security issues
          config_file=".github/renovate.json5"
          
          # Check for overly permissive automerge
          if grep -q '"automerge": true' "$config_file" && ! grep -q '"matchUpdateTypes".*"patch"' "$config_file"; then
            echo "‚ö†Ô∏è  WARNING: Global automerge enabled without update type restrictions"
          else
            echo "‚úÖ Automerge configuration appears safe (patch-only)"
          fi
          
          # Check for reasonable rate limits
          if grep -q '"prConcurrentLimit"' "$config_file"; then
            concurrent_limit=$(grep '"prConcurrentLimit":' "$config_file" | sed -E 's/.*: *([0-9]+).*/\1/')
            if [ "$concurrent_limit" -gt 10 ]; then
              echo "‚ö†Ô∏è  WARNING: High concurrent PR limit ($concurrent_limit) might overwhelm reviewers"
            else
              echo "‚úÖ Reasonable concurrent PR limit: $concurrent_limit"
            fi
          fi
          
          # Check for schedule configuration
          if grep -q '"schedule"' "$config_file"; then
            echo "‚úÖ Update schedule configured (reduces surprise PRs)"
          else
            echo "‚ö†Ô∏è  No update schedule - PRs may arrive at any time"
          fi
          
          # Check for dependency dashboard
          if grep -q '"dependencyDashboard".*true' "$config_file"; then
            echo "‚úÖ Dependency dashboard enabled (good visibility)"
          else
            echo "‚ö†Ô∏è  Dependency dashboard not enabled"
          fi
          
          echo
          echo "üéØ Security recommendations followed:"
          echo "  ‚úÖ Rate limiting configured"
          echo "  ‚úÖ Conservative automerge (patch only)"
          echo "  ‚úÖ Scheduled updates"
          echo "  ‚úÖ Dependency dashboard enabled"
