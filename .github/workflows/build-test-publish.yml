name: Build, Test, and Publish

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Rebuild weekly to get latest base image updates
    - cron: "0 2 * * 0"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      base-dockerfile: ${{ steps.changes.outputs.base-dockerfile }}
      cookbook-dockerfiles: ${{ steps.changes.outputs.cookbook-dockerfiles }}
      docs-only: ${{ steps.changes.outputs.docs-only }}
      any-code: ${{ steps.changes.outputs.any-code }}
      changed-cookbooks: ${{ steps.changes.outputs.changed-cookbooks }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Detect file changes
        id: changes
        run: |
          # Get the base commit for comparison
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # For push events, compare with previous commit
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi
          
          echo "Comparing $BASE_SHA..$HEAD_SHA"
          
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Initialize outputs
          BASE_DOCKERFILE=false
          COOKBOOK_DOCKERFILES=false
          DOCS_ONLY=true
          ANY_CODE=false
          CHANGED_COOKBOOKS=""
          
          # Check each changed file
          while IFS= read -r file; do
            echo "Checking file: $file"
            
            # Check if base Dockerfile changed
            if [[ "$file" == "Dockerfile" ]]; then
              BASE_DOCKERFILE=true
              ANY_CODE=true
              DOCS_ONLY=false
              echo "Base Dockerfile changed"
            fi
            
            # Check if cookbook Dockerfiles changed
            if [[ "$file" =~ ^docs/cookbooks/[^/]+/Dockerfile ]]; then
              COOKBOOK_DOCKERFILES=true
              ANY_CODE=true
              DOCS_ONLY=false
              # Extract cookbook name
              COOKBOOK=$(echo "$file" | sed 's|docs/cookbooks/\([^/]*\)/.*|\1|')
              if [[ -n "$CHANGED_COOKBOOKS" ]]; then
                CHANGED_COOKBOOKS="$CHANGED_COOKBOOKS,$COOKBOOK"
              else
                CHANGED_COOKBOOKS="$COOKBOOK"
              fi
              echo "Cookbook Dockerfile changed: $COOKBOOK"
            fi
            
            # Check if any non-docs files changed
            if [[ ! "$file" =~ ^docs/ ]] && [[ "$file" != "README.md" ]] && [[ ! "$file" =~ \.md$ ]]; then
              ANY_CODE=true
              DOCS_ONLY=false
              echo "Code file changed: $file"
            fi
          done <<< "$CHANGED_FILES"
          
          # Remove duplicates from changed cookbooks
          CHANGED_COOKBOOKS=$(echo "$CHANGED_COOKBOOKS" | tr ',' '\n' | sort -u | tr '\n' ',' | sed 's/,$//')
          
          echo "base-dockerfile=$BASE_DOCKERFILE" >> $GITHUB_OUTPUT
          echo "cookbook-dockerfiles=$COOKBOOK_DOCKERFILES" >> $GITHUB_OUTPUT  
          echo "docs-only=$DOCS_ONLY" >> $GITHUB_OUTPUT
          echo "any-code=$ANY_CODE" >> $GITHUB_OUTPUT
          echo "changed-cookbooks=$CHANGED_COOKBOOKS" >> $GITHUB_OUTPUT
          
          echo "Final outputs:"
          echo "  base-dockerfile: $BASE_DOCKERFILE"
          echo "  cookbook-dockerfiles: $COOKBOOK_DOCKERFILES"
          echo "  docs-only: $DOCS_ONLY"
          echo "  any-code: $ANY_CODE"
          echo "  changed-cookbooks: $CHANGED_COOKBOOKS"

  build-standard:
    name: Build Standard Image
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.any-code == 'true' || github.event_name == 'schedule'
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-metadata: ${{ steps.meta.outputs.json }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --allow-insecure-entitlement security.insecure

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=main,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          target: standard
          # Use single platform for PRs (enables load), multi-platform for main branch
          platforms: ${{ github.event_name == 'pull_request' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Enhanced caching with scope isolation
          cache-from: |
            type=gha,scope=standard-${{ github.ref_name }}
            type=gha,scope=standard-main
          cache-to: type=gha,mode=max,scope=standard-${{ github.ref_name }}
          # Use secret mounting for GITHUB_TOKEN to avoid rate limits securely
          secrets: |
            github_token=${{ secrets.GITHUB_TOKEN }}
          # Build args can be customized here if needed:
          # build-args: |
          #   NODE_VERSION=20.17.0
          #   PYTHON_VERSION=3.12.6

      - name: Build and push ephemeral PR image (same-repo PRs only)
        id: build-ephemeral
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: docker/build-push-action@v6
        with:
          context: .
          target: standard
          platforms: linux/amd64
          push: true
          load: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=standard-${{ github.ref_name }}
            type=gha,scope=standard-main
          cache-to: type=gha,mode=max,scope=standard-${{ github.ref_name }}
          secrets: |
            github_token=${{ secrets.GITHUB_TOKEN }}

      - name: Export image for testing (fork PRs only)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        run: |
          # For fork PRs, we need to make the image available for cookbook testing via tar artifact
          # Same-repo PRs use ephemeral registry tags instead
          docker tag ${{ steps.meta.outputs.tags }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-base

          # Save image to a tarball for sharing with parallel jobs
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-base > /tmp/base-image.tar

      - name: Upload base image artifact (fork PRs only)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        uses: actions/upload-artifact@v5
        with:
          name: base-image
          path: /tmp/base-image.tar
          retention-days: 1

  test-base-targets:
    name: Test Base Target (${{ matrix.target }})
    needs: [detect-changes, build-standard]
    if: needs.detect-changes.outputs.base-dockerfile == 'true' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [standard, dev]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Ensure script is executable
        run: chmod +x scripts/test-dockerfile.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # For same-repo PRs: use ephemeral registry tag for standard target
      - name: Log in to GHCR for ephemeral tag pull (same-repo PRs, standard target)
        if: github.event_name == 'pull_request' && matrix.target == 'standard' && github.event.pull_request.head.repo.fork == false
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull ephemeral PR image for base testing (same-repo PRs, standard target)
        if: github.event_name == 'pull_request' && matrix.target == 'standard' && github.event.pull_request.head.repo.fork == false
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-${{ github.sha }} test-standard:latest

      # For fork PRs: use artifact from build-standard for standard target
      - name: Download base image artifact (fork PRs only, standard target)
        if: github.event_name == 'pull_request' && matrix.target == 'standard' && github.event.pull_request.head.repo.fork == true
        uses: actions/download-artifact@v6
        with:
          name: base-image
          path: /tmp/

      - name: Load and tag base image for testing (fork PRs only, standard target)
        if: github.event_name == 'pull_request' && matrix.target == 'standard' && github.event.pull_request.head.repo.fork == true
        run: |
          docker load < /tmp/base-image.tar
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-base test-standard:latest

      # For pushes/schedule: pull image pushed by build-standard (standard target)
      - name: Pull and tag image for testing (non-PR, standard target)
        if: github.event_name != 'pull_request' && matrix.target == 'standard'
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main test-standard:latest

      # Dev target: build locally for testing (no artifact produced by build-standard)
      - name: Build dev target image for testing
        if: matrix.target == 'dev'
        env:
          DOCKER_BUILDKIT: "1"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🧱 Building dev target..."
          docker build --target dev -t test-dev:latest --secret id=github_token,env=GITHUB_TOKEN .

      - name: Run goss tests for base target
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🧪 Testing ${{ matrix.target }} target via goss..."
          ./scripts/test-dockerfile.sh ${{ matrix.target }} test-${{ matrix.target }}:latest

  parallel-validation:
    name: Parallel Validation
    needs: [detect-changes, build-standard]
    runs-on: ubuntu-latest
    if: always() && (needs.build-standard.result == 'success' || needs.build-standard.result == 'skipped')
    strategy:
      fail-fast: false
      matrix:
        include:
          # Dev build only runs for base dockerfile changes or schedule
          - job: build-dev
            name: Build Dev Image
            condition: ${{ needs.detect-changes.outputs.base-dockerfile == 'true' || github.event_name == 'schedule' }}
          # Test all cookbooks if base dockerfile changed, or only changed cookbooks otherwise
          - job: test-cookbooks
            name: Test Cookbooks
            cookbook: python-cli
            condition: ${{ needs.detect-changes.outputs.base-dockerfile == 'true' || contains(needs.detect-changes.outputs.changed-cookbooks, 'python-cli') || github.event_name == 'schedule' }}
          - job: test-cookbooks
            name: Test Cookbooks
            cookbook: nodejs-backend
            condition: ${{ needs.detect-changes.outputs.base-dockerfile == 'true' || contains(needs.detect-changes.outputs.changed-cookbooks, 'nodejs-backend') || github.event_name == 'schedule' }}
          - job: test-cookbooks
            name: Test Cookbooks
            cookbook: go-microservices
            condition: ${{ needs.detect-changes.outputs.base-dockerfile == 'true' || contains(needs.detect-changes.outputs.changed-cookbooks, 'go-microservices') || github.event_name == 'schedule' }}
          - job: test-cookbooks
            name: Test Cookbooks
            cookbook: rails-fullstack
            condition: ${{ needs.detect-changes.outputs.base-dockerfile == 'true' || contains(needs.detect-changes.outputs.changed-cookbooks, 'rails-fullstack') || github.event_name == 'schedule' }}
          - job: test-cookbooks
            name: Test Cookbooks
            cookbook: react-frontend
            condition: ${{ needs.detect-changes.outputs.base-dockerfile == 'true' || contains(needs.detect-changes.outputs.changed-cookbooks, 'react-frontend') || github.event_name == 'schedule' }}
          - job: test-cookbooks
            name: Test Cookbooks
            cookbook: multistage-production
            condition: ${{ needs.detect-changes.outputs.base-dockerfile == 'true' || contains(needs.detect-changes.outputs.changed-cookbooks, 'multistage-production') || github.event_name == 'schedule' }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Dev build specific steps
      - name: Log in to Container Registry (dev build only)
        if: matrix.job == 'build-dev' && matrix.condition == 'true' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract dev metadata
        if: matrix.job == 'build-dev' && matrix.condition == 'true' && github.ref == 'refs/heads/main'
        id: meta-dev
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=dev

      - name: Build dev image
        if: matrix.job == 'build-dev' && matrix.condition == 'true' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          target: dev
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-dev.outputs.tags }}
          labels: ${{ steps.meta-dev.outputs.labels }}
          # Use secret mounting for GITHUB_TOKEN to avoid rate limits securely
          secrets: |
            github_token=${{ secrets.GITHUB_TOKEN }}
          # Enhanced caching that reuses standard build layers
          cache-from: |
            type=gha,scope=dev-${{ github.ref_name }}
            type=gha,scope=dev-main
            type=gha,scope=standard-${{ github.ref_name }}
          cache-to: type=gha,mode=max,scope=dev-${{ github.ref_name }}

      # Cookbook testing specific steps
      - name: Log in to GHCR for ephemeral tag pull (same-repo PRs only)
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull ephemeral PR image (same-repo PRs only)
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        run: |
          echo "🏗️  Using ephemeral PR image for ${{ matrix.cookbook }} cookbook..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-${{ github.sha }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-base

      - name: Download base image artifact (fork PRs only)
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        uses: actions/download-artifact@v6
        with:
          name: base-image
          path: /tmp/

      - name: Load base image for testing (fork PRs only)
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == true
        run: |
          echo "🏗️  Using tar artifact for fork PR ${{ matrix.cookbook }} cookbook..."
          docker load < /tmp/base-image.tar
          docker images

      - name: Pull base image for testing (main branch)
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true' && github.event_name != 'pull_request'
        run: |
          # For main branch builds, pull the just-built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-base

      - name: Build cookbook extension image (same-repo PR with ephemeral tag)
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true' && github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false
        run: |
          echo "🏗️  Building ${{ matrix.cookbook }} cookbook with ephemeral base image..."
          docker build \
            -f docs/cookbooks/${{ matrix.cookbook }}/Dockerfile \
            --build-arg BASE_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.number }}-${{ github.sha }} \
            -t test-extension-${{ matrix.cookbook }}:latest \
            .

      - name: Build cookbook extension image (fork PR or main branch)
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork == true)
        run: |
          echo "🏗️  Building ${{ matrix.cookbook }} cookbook..."
          docker build \
            -f docs/cookbooks/${{ matrix.cookbook }}/Dockerfile \
            -t test-extension-${{ matrix.cookbook }}:latest \
            .

      - name: Run goss tests for cookbook
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true'
        run: |
          echo "🧪 Running goss tests for ${{ matrix.cookbook }} cookbook..."
          ./scripts/test-dockerfile.sh ${{ matrix.cookbook }} test-extension-${{ matrix.cookbook }}:latest

      - name: Clean up test images
        if: matrix.job == 'test-cookbooks' && matrix.condition == 'true' && always()
        run: |
          docker rmi test-extension-${{ matrix.cookbook }}:latest || true
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-base || true

  # Summary job to provide single status check for all CI
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, build-standard, parallel-validation]
    if: always()
    steps:
      - name: Generate CI summary
        run: |
          echo "🔍 CI Summary for this PR"
          echo "========================"
          
          # Check what type of changes we have
          if [[ "${{ needs.detect-changes.outputs.docs-only }}" == "true" ]]; then
            echo "📚 **Documentation-only changes detected**"
            echo "✅ No builds or tests needed - ready for review!"
            {
              echo "## 📚 Documentation Only PR"
              echo ""
              echo "This pull request contains only documentation changes."
              echo "No builds, tests, or deployments are needed."
              echo ""
              echo "✅ **Status:** Ready for review and merge"
            } >> "$GITHUB_STEP_SUMMARY"
            exit 0
          fi
          
          # For code changes, check all job results
          echo "🏗️ **Code changes detected - full CI pipeline executed**"
          echo ""
          
          # Check build status
          if [[ "${{ needs.build-standard.result }}" == "success" ]]; then
            echo "✅ Base image build: SUCCESS"
          elif [[ "${{ needs.build-standard.result }}" == "skipped" ]]; then
            echo "⏭️ Base image build: SKIPPED (no code changes)"
          else
            echo "❌ Base image build: FAILED"
            exit 1
          fi
          
          # Check parallel validation status
          if [[ "${{ needs.parallel-validation.result }}" == "success" ]]; then
            echo "✅ Validation tests: SUCCESS"
          elif [[ "${{ needs.parallel-validation.result }}" == "skipped" ]]; then
            echo "⏭️ Validation tests: SKIPPED"
          else
            echo "❌ Validation tests: FAILED"
            exit 1
          fi
          
          echo ""
          echo "🎉 All checks passed!"
          
          # Create detailed summary
          {
            echo "## 🚀 CI Pipeline Results"
            echo ""
            echo "| Component | Status | Details |"
            echo "|-----------|--------|---------|"
            echo "| Base Image Build | ${{ needs.build-standard.result == 'success' && '✅ Success' || needs.build-standard.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Standard container image |"
            echo "| Validation Tests | ${{ needs.parallel-validation.result == 'success' && '✅ Success' || needs.parallel-validation.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} | Cookbook and dev image tests |"
            echo ""
            if [[ "${{ needs.detect-changes.outputs.changed-cookbooks }}" != "" ]]; then
              echo "**Changed Cookbooks:** ${{ needs.detect-changes.outputs.changed-cookbooks }}"
              echo ""
            fi
            echo "**Change Type:** ${{ needs.detect-changes.outputs.base-dockerfile == 'true' && 'Base Dockerfile + ' || '' }}${{ needs.detect-changes.outputs.cookbook-dockerfiles == 'true' && 'Cookbook Changes' || 'Other Code Changes' }}"
          } >> "$GITHUB_STEP_SUMMARY"

  publish:
    name: Publish Images
    runs-on: ubuntu-latest
    needs: [build-standard, parallel-validation, ci-summary]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.build-standard.result == 'success' && needs.parallel-validation.result == 'success' && needs.ci-summary.result == 'success'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Confirm images are ready for publishing
        run: |
          echo "✅ All validation passed - ready to publish images"
          echo "Standard image: ${{ needs.build-standard.outputs.image-tag }}"
          echo "Build digest: ${{ needs.build-standard.outputs.image-digest }}"

          # Images were already pushed during the build step for main branch
          echo "Images have been successfully published to registry"

      - name: Create release summary
        run: |
          {
            echo "## 🚀 Published Images"
            echo ""
            echo "| Image | Status | Tests |"
            echo "|-------|--------|-------|"
            echo "| Standard | ✅ Published | ✅ All cookbooks passed |"
            echo "| Dev | ✅ Published | ✅ Included |"
            echo ""
            echo "**Digest:** \`${{ needs.build-standard.outputs.image-digest }}\`"
            echo ""
            echo "All cookbook extensions have been validated against these images."
          } >> "$GITHUB_STEP_SUMMARY"
