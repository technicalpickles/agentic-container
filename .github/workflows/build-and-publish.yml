name: Build and Publish Container Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Rebuild weekly to get latest base image updates
    - cron: '0 2 * * 0'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        target: [minimal, standard, dev, ruby, node, python, go]
        include:
          - target: minimal
            platforms: linux/amd64,linux/arm64
            tags: |
              type=ref,event=branch,suffix=-minimal
              type=ref,event=pr,suffix=-minimal
              type=semver,pattern={{version}},suffix=-minimal
              type=semver,pattern={{major}}.{{minor}},suffix=-minimal
              type=raw,value=minimal,enable={{is_default_branch}}
          - target: standard
            platforms: linux/amd64,linux/arm64
            tags: |
              type=ref,event=branch,suffix=-standard
              type=ref,event=pr,suffix=-standard
              type=semver,pattern={{version}},suffix=-standard
              type=semver,pattern={{major}}.{{minor}},suffix=-standard
              type=raw,value=standard,enable={{is_default_branch}}
              type=raw,value=latest,enable={{is_default_branch}}
          - target: dev
            platforms: linux/amd64,linux/arm64
            tags: |
              type=ref,event=branch,suffix=-dev
              type=ref,event=pr,suffix=-dev
              type=semver,pattern={{version}},suffix=-dev
              type=semver,pattern={{major}}.{{minor}},suffix=-dev
              type=raw,value=dev,enable={{is_default_branch}}
          - target: ruby
            platforms: linux/amd64,linux/arm64
            tags: |
              type=ref,event=branch,suffix=-ruby
              type=ref,event=pr,suffix=-ruby
              type=semver,pattern={{version}},suffix=-ruby
              type=semver,pattern={{major}}.{{minor}},suffix=-ruby
              type=raw,value=ruby,enable={{is_default_branch}}
          - target: node
            platforms: linux/amd64,linux/arm64
            tags: |
              type=ref,event=branch,suffix=-node
              type=ref,event=pr,suffix=-node
              type=semver,pattern={{version}},suffix=-node
              type=semver,pattern={{major}}.{{minor}},suffix=-node
              type=raw,value=node,enable={{is_default_branch}}
          - target: python
            platforms: linux/amd64,linux/arm64
            tags: |
              type=ref,event=branch,suffix=-python
              type=ref,event=pr,suffix=-python
              type=semver,pattern={{version}},suffix=-python
              type=semver,pattern={{major}}.{{minor}},suffix=-python
              type=raw,value=python,enable={{is_default_branch}}
          - target: go
            platforms: linux/amd64,linux/arm64
            tags: |
              type=ref,event=branch,suffix=-go
              type=ref,event=pr,suffix=-go
              type=semver,pattern={{version}},suffix=-go
              type=semver,pattern={{major}}.{{minor}},suffix=-go
              type=raw,value=go,enable={{is_default_branch}}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: ${{ matrix.tags }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ${{ matrix.target }}
        platforms: ${{ matrix.platforms }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Generate and update documentation
  update-docs:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README with latest tags
      run: |
        # This will be expanded with a script that updates documentation
        # with the latest published image tags and sizes
        echo "Documentation update placeholder"
        
    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        if git diff --quiet; then
          echo "No changes to commit"
        else
          git add README.md docs/
          git commit -m "docs: Update container image documentation [skip ci]" || exit 0
          git push
        fi
