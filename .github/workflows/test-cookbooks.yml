name: Test Cookbook Examples

on:
  push:
    branches: [ main, develop, goss-testing ]
    paths: 
      - 'docs/cookbooks/**'
      - 'Dockerfile'
      - 'scripts/test-goss.sh'
      - '.github/workflows/test-cookbooks.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'docs/cookbooks/**' 
      - 'Dockerfile'
      - 'scripts/test-goss.sh'
      - '.github/workflows/test-cookbooks.yml'

jobs:
  test-cookbooks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue testing other cookbooks even if one fails
      matrix:
        cookbook: [python-cli, nodejs-backend, go-microservices, rails-fullstack, react-frontend, multistage-production]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build base agentic-container image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: standard
        tags: ghcr.io/technicalpickles/agentic-container:test-base
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build cookbook extension image
      run: |
        echo "üèóÔ∏è  Building ${{ matrix.cookbook }} cookbook..."
        docker build \
          -f docs/cookbooks/${{ matrix.cookbook }}/Dockerfile \
          -t test-extension-${{ matrix.cookbook }}:latest \
          .

    - name: Run goss tests for ${{ matrix.cookbook }}
      run: |
        echo "üß™ Running goss tests for ${{ matrix.cookbook }} cookbook..."
        chmod +x scripts/test-goss.sh
        ./scripts/test-goss.sh ${{ matrix.cookbook }} test-extension-${{ matrix.cookbook }}:latest

    - name: Clean up test images
      if: always()
      run: |
        docker rmi test-extension-${{ matrix.cookbook }}:latest || true
        docker rmi ghcr.io/technicalpickles/agentic-container:test-base || true

  # Summary job to provide single status check
  test-cookbooks-summary:
    runs-on: ubuntu-latest
    needs: test-cookbooks
    if: always()
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test-cookbooks.result }}" != "success" ]]; then
          echo "‚ùå One or more cookbook tests failed"
          exit 1
        else
          echo "‚úÖ All cookbook tests passed!"
        fi

  # Optional: Test the test-extensions.sh script as fallback
  test-extensions-script:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'  # Only on PRs to avoid redundancy
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build base agentic-container image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: standard
        tags: ghcr.io/technicalpickles/agentic-container:test-base
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test extensions script
      run: |
        echo "üß™ Testing extensions script functionality..."
        chmod +x docs/cookbooks/test-extensions.sh
        
        # Test one cookbook with the extensions script
        echo "Testing python-cli cookbook with test-extensions.sh..."
        ./docs/cookbooks/test-extensions.sh docs/cookbooks/python-cli/Dockerfile

    - name: Clean up test images
      if: always()
      run: |
        docker system prune -f --filter "label=test-extension" || true
        docker rmi ghcr.io/technicalpickles/agentic-container:test-base || true
